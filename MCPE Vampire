//Vampire Mod v3.0 ~ Kioni.

ModPE.setItem(388, "emerald", 0, "Emerald");

ModPE.setItem(375, "spider_eye", 0, "Spider Eye");

ModPE.setItem(385, "fireball", 0, "Fire Charge");

ModPE.setItem(424, "ender_eye", 0, "Vampire Eye");

var dream = 0;
var Px; 
var Py; 
var Pz;
var room = 0;
var rsc = 0;
var shelf = 0;
var sprintTick = 1;
var gb1 = 0;
var gb2 = 0;
var gb3 = 0;
var gb4 = 0;
var gb5 = 0;
var trap = 0;
var Vampire = 1;
var check = 1;
var soul = 9999;
var cur9 = 0;
var cur8 = 0;
var cur7 = 0;
var cur6 = 0;
var cur5 = 0;
var cur4 = 0;
var cur3 = 0;
var cur2 = 0;
var cur1 = 0;
var cur0 = 0;
var power = 0;
var rocket = 0;
var tp = 0;
var grav = 0;
var exp = 0;
var ride = 0;
var chopper = 0;
var mine = 0;
var regen = 0;
var countdown = 30;
var prime = false;
var pig = false;

function newLevel(x,y,z)
{
rsc = ModPE.readData("rsc");
shelf = ModPE.readData("shelf");
gb1 = ModPE.readData("gb1");
gb2 = ModPE.readData("gb2");
gb3 = ModPE.readData("gb3");
gb4 = ModPE.readData("gb4");
gb5 = ModPE.readData("gb5");
trap = ModPE.readData("trap");
clientMessage(ChatColor.RED + "MCPE Vampire Mod");

check = ModPE.readData("check");
if(check == 2)
{
   Vampire = ModPE.readData("Vampire");
   soul = ModPE.readData("soul");
   cur9 = ModPE.readData("cur9");
   cur8 = ModPE.readData("cur8");
   cur7 = ModPE.readData("cur7");
   cur6 = ModPE.readData("cur6");
   cur5 = ModPE.readData("cur5");
   cur4 = ModPE.readData("cur4");
   cur3 = ModPE.readData("cur3");
   cur2 = ModPE.readData("cur2");
   cur1 = ModPE.readData("cur1");
   cur0 = ModPE.readData("cur0");
}
if(soul < 9999)
{
soul--;
}
  var activity = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
              
  activity.runOnUiThread(new java.lang.Runnable({ run: function() {
    
        try { 
          buttonWindow = new android.widget.PopupWindow();
          
          var layout = new android.widget.RelativeLayout(activity);
          
          var button = new android.widget.Button(activity);
          
          button.setText("*crypt*");
          
          button.setOnClickListener(new android.view.View.OnClickListener({
                
                onClick: function(viewarg) {
                   
                  if(Vampire == 2)
                  {
                  clientMessage(ChatColor.BLUE + "IQ:" + shelf);
                  clientMessage(ChatColor.RED + "Blood:" + Entity.getHealth(getPlayerEnt()));
                   }
                  clientMessage("Power:" + rocket + tp + grav + exp + ride + chopper + mine);
                if(rocket == 1)
                {
                     clientMessage("Leviosa");
                }
                if(tp == 1)
                {
                     clientMessage("Fira");
                }
                if(grav == 1)
                {
                     clientMessage("Avada Kadava");
                }
                if(exp == 1)
                {
                     clientMessage("Incindio");
                }
                if(ride == 1)
                {
                     clientMessage("Raido");
                }
                if(chopper == 1)
                {
                     clientMessage("Loggsman");
                }
                if(mine == 1)
                {
                     clientMessage("Mining");
                }
                clientMessage(ChatColor.GREEN + "π**°" + soul + "°**π");
                if(Vampire == 2)
                {
                   clientMessage(ChatColor.RED + "Vampire");
                }
                if(Vampire == 2 && shelf > 900)
                {
                clientMessage("Mobs in Ether:" + trap);
                }
                if(getCarriedItem()== 260 && Vampire == 2 && shelf > 1000)
                {
                regen = 1;
                clientMessage("Crypt Returning Lifeforce....");
                }
                if(getCarriedItem()== 424 && Vampire == 2)
                {
                if(pig== true)
                {
                Entity.setRenderType(Player.getEntity(), 3);
                Entity.setMobSkin(Player.getEntity(), "mob/char.png");
                pig = false;
                }
                }
                }
          }));
          layout.addView(button);
          buttonWindow.setContentView(layout);
          buttonWindow.setWidth(android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
          buttonWindow.setHeight(android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
          
          buttonWindow.setBackgroundDrawable(new
android.graphics.drawable.ColorDrawable(android.graphics.Color.RED));
          
          buttonWindow.showAtLocation(activity.getWindow().getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.BOTTOM, 0, 0);
          
        }catch(problem){
          print("Button could not be displayed: " + problem); 
        }
  }}));
}

function attackHook(attacker,victim,x,y,z)
{

if(getCarriedItem()==388)
{
Entity.setMobSkin(victim,"mob/char.png");
Entity.setRenderType(victim, 3);
addItemInventory(388,-1);
}

if(Vampire == 2)
{

var xx = Entity.getX(victim);
var yy = Entity.getY(victim);
var zz = Entity.getZ(victim);

setTile(xx, yy+1, zz, 11);
{

Level.destroyBlock(xx, yy+1, zz, false)
}

}

var feed = Entity.getHealth(getPlayerEnt());

     if(Vampire == 2 && feed < 40)
     {
         Player.setHealth(feed + 3);
     }
     if(Vampire == 2 && getCarriedItem()==406)
     {
         Player.setHealth(20);
         Level.setTime(0);
         addItemInventory(406,-1);
         Entity.setHealth(victim,0);
         soul++;
     }
     if(Vampire == 2 && getCarriedItem()==260 && shelf > 1000)
     {
         clientMessage("gave a little blood...");
         Player.setHealth(feed - 6);
         Entity.setHealth(victim,100);
         soul--;
     }

if(getCarriedItem()==280)
	{
		if(rocket == 1)
		{
			preventDefault();
			setVelY(victim,1.5);
		}   
		else
		if(tp == 1)
		{
			preventDefault();
		   Entity.setFireTicks(victim,3.5);
		}
		else
		if(grav == 1)
		{
			preventDefault();
			Entity.setHealth(victim,0);
         soul--;
		}
		else
		if(exp == 1)
		{
			preventDefault();
		   clientMessage("****");
		}
      		else
		if(ride == 1)
		{
			preventDefault();
			rideAnimal(attacker,victim); 
		}
 }

 if(getCarriedItem() == 340 && shelf > 800 && Vampire == 2)
{
preventDefault();
clientMessage(ChatColor.RED + "Age:" + Entity.getAnimalAge(victim));
clientMessage(ChatColor.RED + "Type:" + Entity.getEntityTypeId(victim));
clientMessage(ChatColor.RED + "Health:" + Entity.getHealth(victim));
clientMessage(ChatColor.RED + "Coords: X" + Entity.getX(victim) + "Y" +  Entity.getY(victim) + "Z" + Entity.getZ(victim));
}
if(getCarriedItem() == 20 && shelf > 900 && Vampire == 2)
{
  if(trap == 0)
  {
     gb1 = Entity.getEntityTypeId(victim);
     Entity.remove(victim);
     trap = 1;
     clientMessage("Mob Trapped in Ether");
  }
  else if(trap == 1)
  {
     gb2 = Entity.getEntityTypeId(victim);
     Entity.remove(victim);
     trap = 2;
     clientMessage("Mob Trapped in Ether");
  }
  else if(trap == 2)
  {
     gb3 = Entity.getEntityTypeId(victim);
     Entity.remove(victim);
     trap = 3;
     clientMessage("Mob Trapped in Ether");
  }
  else if(trap == 3)
  {
     gb4 = Entity.getEntityTypeId(victim);
     Entity.remove(victim);
     trap = 4;
     clientMessage("Mob Trapped in Ether");
  }
  else if(trap == 4)
  {
     gb5 = Entity.getEntityTypeId(victim);
     Entity.remove(victim);
     trap = 5;
     clientMessage("Mob Trapped in Ether");
  }
  else if(trap == 5)
  {
     clientMessage("Glass Ethers Full!");
  }
}
if(getCarriedItem() == 341 && Entity.getEntityTypeId(victim) == 12 && shelf == 1100 && Vampire == 2)
{
     var Dx = Entity.getX(victim);
     var Dy = Entity.getY(victim);
     var Dz = Entity.getZ(victim);
     addItemInventory(341,-1);
     Entity.remove(victim);
     Level.spawnMob(Dx,Dy,Dz,36);
     soul--;
}
}

function deathHook(murderer, victim, x, y, z)
{ 
     var mx = Entity.getX(victim);
     var my = Entity.getY(victim);
     var mz = Entity.getZ(victim);

     if(shelf > 50)
     {
     var shelfdeath = Math.floor((Math.random()*3)+1);
if(shelfdeath == 3) {
         Level.dropItem(mx, my, mz, 1, 339, 1, 0);
     }
     }
     if(shelf > 400)
     {
     var moneydeath = Math.floor((Math.random()*3)+1);
if(moneydeath == 3) {
         Level.dropItem(mx, my, mz, 1, 388, 1, 0);
     }
     }

     if(Entity.getEntityTypeId(victim)==35)
{
Level.dropItem(mx, my, mz, 1, 375, 1, 0);
}
}

function useItem(x, y, z, itemId, blockId) {
if(itemId == 375 && blockId == 26)
{
addItemInventory(375,-1);

var bite = Math.floor((Math.random()*6)+1);
if(bite == 3) {
clientMessage("You Feel Bloody....");
Vampire = 2;
check = 2;
}
}

if (blockId == 26 && dream == 0) {

var random = Math.floor((Math.random()*6)+1);
if(random == 1) {
	 preventDefault();
Px = getPlayerX(); 
Py = getPlayerY(); 
Pz = getPlayerZ(); 
setTile (1, 1, 1, 173); 
setTile (1, 1, 2, 173); 
setTile (2, 1, 1, 173); 
setTile (2, 1, 2, 173); 
setTile (3, 1, 1, 173); 
setTile (1, 1, 3, 173); 
setTile (2, 1, 3, 173); 
setTile (3, 1, 2, 173); 
setTile (3, 1, 3, 173); 
setTile (4, 1, 1, 173); 
setTile (1, 1, 4, 173); 
setTile (2, 1, 4, 173); 
setTile (4, 1, 2, 173); 
setTile (3, 1, 4, 173); 
setTile (4, 1, 3, 173); 
setTile (4, 1, 4, 173); 
setTile (5, 1, 1, 173); 
setTile (1, 1, 5, 173); 
setTile (2, 1, 5, 173); 
setTile (5, 1, 2, 173); 
setTile (3, 1, 5, 173); 
setTile (5, 1, 3, 173); 
setTile (4, 1, 5, 173); 
setTile (5, 1, 4, 173); 
setTile (5, 1, 5, 173); 
setTile (7, 1, 7, 173); 
setTile (7, 1, 1, 173); 
setTile (1, 1, 7, 173); 
setTile (7, 1, 2, 173); 
setTile (2, 1, 7, 173); 
setTile (3, 1, 7, 173); 
setTile (7, 1, 3, 173); 
setTile (4, 1, 7, 173); 
setTile (7, 1, 4, 173); 
setTile (5, 1, 7, 173); 
setTile (7, 1, 5, 173); 
setTile (6, 1, 7, 173); 
setTile (7, 1, 6, 173); 
setTile (6, 1, 5, 173); 
setTile (5, 1, 6, 173); 
setTile (4, 1, 6, 173); 
setTile (6, 1, 4, 173); 
setTile (3, 1, 6, 173); 
setTile (6, 1, 3, 173); 
setTile (6, 1, 2, 173); 
setTile (2, 1, 6, 173); 
setTile (1, 1, 6, 173); 
setTile (6, 1, 1, 173); 
setTile (6, 1, 6, 173); 
setTile (1, 2, 1, 173); 
setTile (1, 2, 2, 173); 
setTile (2, 2, 1, 173); 
setTile (2, 2, 2, 0); 
setTile (3, 2, 1, 173); 
setTile (1, 2, 3, 173); 
setTile (2, 2, 3, 0); 
setTile (3, 2, 2, 0); 
setTile (3, 2, 3, 0); 
setTile (4, 2, 1, 173); 
setTile (1, 2, 4, 173); 
setTile (2, 2, 4, 0); 
setTile (3, 2, 4, 0); 
setTile (4, 2, 3, 0); 
setTile (4, 2, 4, 0); 
setTile (5, 2, 1, 173); 
setTile (1, 2, 5, 173); 
setTile (2, 2, 5, 0); 
setTile (5, 2, 2, 0); 
setTile (3, 2, 5, 0); 
setTile (5, 2, 3, 0); 
setTile (4, 2, 5, 0); 
setTile (5, 2, 4, 0); 
setTile (5, 2, 5, 0); 
setTile (7, 2, 7, 173); 
setTile (7, 2, 1, 173); 
setTile (1, 2, 7, 173); 
setTile (7, 2, 2, 173); 
setTile (2, 2, 7, 173); 
setTile (3, 2, 7, 173); 
setTile (7, 2, 3, 173); 
setTile (4, 2, 7, 173); 
setTile (7, 2, 4, 173); 
setTile (5, 2, 7, 173); 
setTile (7, 2, 5, 173); 
setTile (6, 2, 7, 173); 
setTile (7, 2, 6, 173); 
setTile (6, 2, 5, 0); 
setTile (5, 2, 6, 0); 
setTile (4, 2, 6, 0); 
setTile (6, 2, 4, 0); 
setTile (3, 2, 6, 0); 
setTile (6, 2, 3, 0); 
setTile (6, 2, 2, 0); 
setTile (2, 2, 6, 0); 
setTile (1, 2, 6, 173); 
setTile (6, 2, 1, 173); 
setTile (6, 2, 6, 0); 
setTile (1, 3, 1, 173); 
setTile (1, 3, 2, 173); 
setTile (2, 3, 1, 173); 
setTile (2, 3, 2, 0); 
setTile (3, 3, 1, 173); 
setTile (1, 3, 3, 173); 
setTile (2, 3, 3, 0); 
setTile (3, 3, 2, 0); 
setTile (3, 3, 3, 0); 
setTile (4, 3, 1, 173); 
setTile (1, 3, 4, 173); 
setTile (2, 3, 4, 0); 
setTile (4, 3, 2, 0); 
setTile (3, 3, 4, 0); 
setTile (4, 3, 3, 0); 
setTile (4, 3, 4, 0); 
setTile (5, 3, 1, 173); 
setTile (1, 3, 5, 173); 
setTile (2, 3, 5, 0); 
setTile (5, 3, 2, 0); 
setTile (3, 3, 5, 0); 
setTile (5, 3, 3, 0); 
setTile (4, 3, 5, 0); 
setTile (5, 3, 4, 0); 
setTile (5, 3, 5, 0); 
setTile (7, 3, 7, 173); 
setTile (7, 3, 1, 173); 
setTile (1, 3, 7, 173); 
setTile (7, 3, 2, 173); 
setTile (2, 3, 7, 173); 
setTile (3, 3, 7, 173); 
setTile (7, 3, 3, 173); 
setTile (4, 3, 7, 173); 
setTile (7, 3, 4, 173); 
setTile (5, 3, 7, 173); 
setTile (7, 3, 5, 173); 
setTile (6, 3, 7, 173); 
setTile (7, 3, 6, 173); 
setTile (6, 3, 5, 0); 
setTile (5, 3, 6, 0); 
setTile (4, 3, 6, 0); 
setTile (6, 3, 4, 0); 
setTile (3, 3, 6, 0); 
setTile (6, 3, 3, 0); 
setTile (6, 3, 2, 0); 
setTile (2, 3, 6, 0); 
setTile (1, 3, 6, 173); 
setTile (6, 3, 1, 173); 
setTile (6, 3, 6, 0); 
setTile (1, 4, 1, 173); 
setTile (1, 4, 2, 173); 
setTile (2, 4, 1, 173); 
setTile (2, 4, 2, 0); 
setTile (3, 4, 1, 173); 
setTile (1, 4, 3, 173); 
setTile (2, 4, 3, 0); 
setTile (3, 4, 2, 0); 
setTile (3, 4, 3, 0); 
setTile (4, 4, 1, 173); 
setTile (1, 4, 4, 173); 
setTile (2, 4, 4, 0); 
setTile (4, 4, 2, 0); 
setTile (3, 4, 4, 0); 
setTile (4, 4, 3, 0); 
setTile (4, 4, 4, 0); 
setTile (5, 4, 1, 173); 
setTile (1, 4, 5, 173); 
setTile (2, 4, 5, 0); 
setTile (5, 4, 2, 0); 
setTile (3, 4, 5, 0); 
setTile (5, 4, 3, 0); 
setTile (4, 4, 5, 0); 
setTile (5, 4, 4, 0); 
setTile (5, 4, 5, 0); 
setTile (7, 4, 7, 173); 
setTile (7, 4, 1, 173); 
setTile (1, 4, 7, 173); 
setTile (7, 4, 2, 173); 
setTile (2, 4, 7, 173); 
setTile (3, 4, 7, 173); 
setTile (7, 4, 3, 173); 
setTile (4, 4, 7, 173); 
setTile (7, 4, 4, 173); 
setTile (5, 4, 7, 173); 
setTile (7, 4, 5, 173); 
setTile (6, 4, 7, 173); 
setTile (7, 4, 6, 173); 
setTile (6, 4, 5, 0); 
setTile (5, 4, 6, 0); 
setTile (4, 4, 6, 0); 
setTile (6, 4, 4, 0); 
setTile (3, 4, 6, 0); 
setTile (6, 4, 3, 0); 
setTile (6, 4, 2, 0); 
setTile (2, 4, 6, 0); 
setTile (1, 4, 6, 173); 
setTile (6, 4, 1, 173); 
setTile (6, 4, 6, 0); 
setTile (1, 5, 1, 173); 
setTile (1, 5, 2, 173); 
setTile (2, 5, 1, 173); 
setTile (2, 5, 2, 0); 
setTile (3, 5, 1, 173); 
setTile (1, 5, 3, 173); 
setTile (2, 5, 3, 0); 
setTile (3, 5, 2, 0); 
setTile (3, 5, 3, 0); 
setTile (4, 5, 1, 173); 
setTile (1, 5, 4, 173); 
setTile (2, 5, 4, 0); 
setTile (4, 5, 2, 0); 
setTile (3, 5, 4, 0); 
setTile (4, 5, 3, 0); 
setTile (4, 5, 4, 0); 
setTile (5, 5, 1, 173); 
setTile (1, 5, 5, 173); 
setTile (2, 5, 5, 0); 
setTile (5, 5, 2, 0); 
setTile (3, 5, 5, 0); 
setTile (5, 5, 3, 0); 
setTile (4, 5, 5, 0); 
setTile (5, 5, 4, 0); 
setTile (5, 5, 5, 0); 
setTile (7, 5, 7, 173); 
setTile (7, 5, 1, 173); 
setTile (1, 5, 7, 173); 
setTile (7, 5, 2, 173); 
setTile (2, 5, 7, 173); 
setTile (3, 5, 7, 173); 
setTile (7, 5, 3, 173); 
setTile (4, 5, 7, 173); 
setTile (7, 5, 4, 173); 
setTile (5, 5, 7, 173); 
setTile (7, 5, 5, 173); 
setTile (6, 5, 7, 173); 
setTile (7, 5, 6, 173); 
setTile (6, 5, 5, 0); 
setTile (5, 5, 6, 0); 
setTile (4, 5, 6, 0); 
setTile (6, 5, 4, 0); 
setTile (3, 5, 6, 0); 
setTile (6, 5, 3, 0); 
setTile (6, 5, 2, 0); 
setTile (2, 5, 6, 0); 
setTile (1, 5, 6, 173); 
setTile (6, 5, 1, 173); 
setTile (6, 5, 6, 173);
setTile (1, 6, 1, 173); 
setTile (1, 6, 2, 173); 
setTile (2, 6, 1, 173); 
setTile (2, 6, 2, 173); 
setTile (3, 6, 1, 173); 
setTile (1, 6, 3, 173); 
setTile (2, 6, 3, 173); 
setTile (3, 6, 2, 173); 
setTile (3, 6, 3, 173); 
setTile (4, 6, 1, 173); 
setTile (1, 6, 4, 173); 
setTile (2, 6, 4, 173); 
setTile (4, 6, 2, 173); 
setTile (3, 6, 4, 173); 
setTile (4, 6, 3, 173); 
setTile (4, 6, 4, 173); 
setTile (5, 6, 1, 173); 
setTile (1, 6, 5, 173); 
setTile (2, 6, 5, 173); 
setTile (5, 6, 2, 173); 
setTile (3, 6, 5, 173); 
setTile (5, 6, 3, 173); 
setTile (4, 6, 5, 173); 
setTile (5, 6, 4, 173); 
setTile (5, 6, 5, 173); 
setTile (7, 6, 7, 173); 
setTile (7, 6, 1, 173); 
setTile (1, 6, 7, 173); 
setTile (7, 6, 2, 173); 
setTile (2, 6, 7, 173); 
setTile (3, 6, 7, 173); 
setTile (7, 6, 3, 173); 
setTile (4, 6, 7, 173); 
setTile (7, 6, 4, 173); 
setTile (5, 6, 7, 173); 
setTile (7, 6, 5, 173); 
setTile (6, 6, 7, 173); 
setTile (7, 6, 6, 173); 
setTile (6, 6, 5, 173); 
setTile (5, 6, 6, 173); 
setTile (4, 6, 6, 173); 
setTile (6, 6, 4, 173); 
setTile (3, 6, 6, 173); 
setTile (6, 6, 3, 173); 
setTile (6, 6, 2, 173); 
setTile (2, 6, 6, 173); 
setTile (1, 6, 6, 173); 
setTile (6, 6, 1, 173); 
setTile (6, 6, 6, 173); 
setPosition(getPlayerEnt(), 5, 4, 5); 
dream = 1; 
setTile(4, 2, 2, 246);
clientMessage("am i dreaming....");
Player.setHealth(20);
return; 
} else if (random == 2) {
	clientMessage("Nitey Nite");
   if(Vampire==2)
{
preventDefault();
clientMessage("AAAAARRRRGGGGGGHHGGHGGHHGRFHRGRHTHTHG!!!!!!!#@#@##@");
}
} else if (random == 3) {
	 preventDefault();
Px = getPlayerX(); 
Py = getPlayerY(); 
Pz = getPlayerZ(); 
setTile (1, 1, 1, 173); 
setTile (1, 1, 2, 173); 
setTile (2, 1, 1, 173); 
setTile (2, 1, 2, 173); 
setTile (3, 1, 1, 173); 
setTile (1, 1, 3, 173); 
setTile (2, 1, 3, 173); 
setTile (3, 1, 2, 173); 
setTile (3, 1, 3, 173); 
setTile (4, 1, 1, 173); 
setTile (1, 1, 4, 173); 
setTile (2, 1, 4, 173); 
setTile (4, 1, 2, 173); 
setTile (3, 1, 4, 173); 
setTile (4, 1, 3, 173); 
setTile (4, 1, 4, 173); 
setTile (5, 1, 1, 173); 
setTile (1, 1, 5, 173); 
setTile (2, 1, 5, 173); 
setTile (5, 1, 2, 173); 
setTile (3, 1, 5, 173); 
setTile (5, 1, 3, 173); 
setTile (4, 1, 5, 173); 
setTile (5, 1, 4, 173); 
setTile (5, 1, 5, 173); 
setTile (7, 1, 7, 173); 
setTile (7, 1, 1, 173); 
setTile (1, 1, 7, 173); 
setTile (7, 1, 2, 173); 
setTile (2, 1, 7, 173); 
setTile (3, 1, 7, 173); 
setTile (7, 1, 3, 173); 
setTile (4, 1, 7, 173); 
setTile (7, 1, 4, 173); 
setTile (5, 1, 7, 173); 
setTile (7, 1, 5, 173); 
setTile (6, 1, 7, 173); 
setTile (7, 1, 6, 173); 
setTile (6, 1, 5, 173); 
setTile (5, 1, 6, 173); 
setTile (4, 1, 6, 173); 
setTile (6, 1, 4, 173); 
setTile (3, 1, 6, 173); 
setTile (6, 1, 3, 173); 
setTile (6, 1, 2, 173); 
setTile (2, 1, 6, 173); 
setTile (1, 1, 6, 173); 
setTile (6, 1, 1, 173); 
setTile (6, 1, 6, 173); 
setTile (1, 2, 1, 173); 
setTile (1, 2, 2, 173); 
setTile (2, 2, 1, 173); 
setTile (2, 2, 2, 0); 
setTile (3, 2, 1, 173); 
setTile (1, 2, 3, 173); 
setTile (2, 2, 3, 0); 
setTile (3, 2, 2, 0); 
setTile (3, 2, 3, 0); 
setTile (4, 2, 1, 173); 
setTile (1, 2, 4, 173); 
setTile (2, 2, 4, 0); 
setTile (3, 2, 4, 0); 
setTile (4, 2, 3, 0); 
setTile (4, 2, 4, 0); 
setTile (5, 2, 1, 173); 
setTile (1, 2, 5, 173); 
setTile (2, 2, 5, 0); 
setTile (5, 2, 2, 0); 
setTile (3, 2, 5, 0); 
setTile (5, 2, 3, 0); 
setTile (4, 2, 5, 0); 
setTile (5, 2, 4, 0); 
setTile (5, 2, 5, 0); 
setTile (7, 2, 7, 173); 
setTile (7, 2, 1, 173); 
setTile (1, 2, 7, 173); 
setTile (7, 2, 2, 173); 
setTile (2, 2, 7, 173); 
setTile (3, 2, 7, 173); 
setTile (7, 2, 3, 173); 
setTile (4, 2, 7, 173); 
setTile (7, 2, 4, 173); 
setTile (5, 2, 7, 173); 
setTile (7, 2, 5, 173); 
setTile (6, 2, 7, 173); 
setTile (7, 2, 6, 173); 
setTile (6, 2, 5, 0); 
setTile (5, 2, 6, 0); 
setTile (4, 2, 6, 0); 
setTile (6, 2, 4, 0); 
setTile (3, 2, 6, 0); 
setTile (6, 2, 3, 0); 
setTile (6, 2, 2, 0); 
setTile (2, 2, 6, 0); 
setTile (1, 2, 6, 173); 
setTile (6, 2, 1, 173); 
setTile (6, 2, 6, 0); 
setTile (1, 3, 1, 173); 
setTile (1, 3, 2, 173); 
setTile (2, 3, 1, 173); 
setTile (2, 3, 2, 0); 
setTile (3, 3, 1, 173); 
setTile (1, 3, 3, 173); 
setTile (2, 3, 3, 0); 
setTile (3, 3, 2, 0); 
setTile (3, 3, 3, 0); 
setTile (4, 3, 1, 173); 
setTile (1, 3, 4, 173); 
setTile (2, 3, 4, 0); 
setTile (4, 3, 2, 0); 
setTile (3, 3, 4, 0); 
setTile (4, 3, 3, 0); 
setTile (4, 3, 4, 0); 
setTile (5, 3, 1, 173); 
setTile (1, 3, 5, 173); 
setTile (2, 3, 5, 0); 
setTile (5, 3, 2, 0); 
setTile (3, 3, 5, 0); 
setTile (5, 3, 3, 0); 
setTile (4, 3, 5, 0); 
setTile (5, 3, 4, 0); 
setTile (5, 3, 5, 0); 
setTile (7, 3, 7, 173); 
setTile (7, 3, 1, 173); 
setTile (1, 3, 7, 173); 
setTile (7, 3, 2, 173); 
setTile (2, 3, 7, 173); 
setTile (3, 3, 7, 173); 
setTile (7, 3, 3, 173); 
setTile (4, 3, 7, 173); 
setTile (7, 3, 4, 173); 
setTile (5, 3, 7, 173); 
setTile (7, 3, 5, 173); 
setTile (6, 3, 7, 173); 
setTile (7, 3, 6, 173); 
setTile (6, 3, 5, 0); 
setTile (5, 3, 6, 0); 
setTile (4, 3, 6, 0); 
setTile (6, 3, 4, 0); 
setTile (3, 3, 6, 0); 
setTile (6, 3, 3, 0); 
setTile (6, 3, 2, 0); 
setTile (2, 3, 6, 0); 
setTile (1, 3, 6, 173); 
setTile (6, 3, 1, 173); 
setTile (6, 3, 6, 0); 
setTile (1, 4, 1, 173); 
setTile (1, 4, 2, 173); 
setTile (2, 4, 1, 173); 
setTile (2, 4, 2, 0); 
setTile (3, 4, 1, 173); 
setTile (1, 4, 3, 173); 
setTile (2, 4, 3, 0); 
setTile (3, 4, 2, 0); 
setTile (3, 4, 3, 0); 
setTile (4, 4, 1, 173); 
setTile (1, 4, 4, 173); 
setTile (2, 4, 4, 0); 
setTile (4, 4, 2, 0); 
setTile (3, 4, 4, 0); 
setTile (4, 4, 3, 0); 
setTile (4, 4, 4, 0); 
setTile (5, 4, 1, 173); 
setTile (1, 4, 5, 173); 
setTile (2, 4, 5, 0); 
setTile (5, 4, 2, 0); 
setTile (3, 4, 5, 0); 
setTile (5, 4, 3, 0); 
setTile (4, 4, 5, 0); 
setTile (5, 4, 4, 0); 
setTile (5, 4, 5, 0); 
setTile (7, 4, 7, 173); 
setTile (7, 4, 1, 173); 
setTile (1, 4, 7, 173); 
setTile (7, 4, 2, 173); 
setTile (2, 4, 7, 173); 
setTile (3, 4, 7, 173); 
setTile (7, 4, 3, 173); 
setTile (4, 4, 7, 173); 
setTile (7, 4, 4, 173); 
setTile (5, 4, 7, 173); 
setTile (7, 4, 5, 173); 
setTile (6, 4, 7, 173); 
setTile (7, 4, 6, 173); 
setTile (6, 4, 5, 0); 
setTile (5, 4, 6, 0); 
setTile (4, 4, 6, 0); 
setTile (6, 4, 4, 0); 
setTile (3, 4, 6, 0); 
setTile (6, 4, 3, 0); 
setTile (6, 4, 2, 0); 
setTile (2, 4, 6, 0); 
setTile (1, 4, 6, 173); 
setTile (6, 4, 1, 173); 
setTile (6, 4, 6, 0); 
setTile (1, 5, 1, 173); 
setTile (1, 5, 2, 173); 
setTile (2, 5, 1, 173); 
setTile (2, 5, 2, 0); 
setTile (3, 5, 1, 173); 
setTile (1, 5, 3, 173); 
setTile (2, 5, 3, 0); 
setTile (3, 5, 2, 0); 
setTile (3, 5, 3, 0); 
setTile (4, 5, 1, 173); 
setTile (1, 5, 4, 173); 
setTile (2, 5, 4, 0); 
setTile (4, 5, 2, 0); 
setTile (3, 5, 4, 0); 
setTile (4, 5, 3, 0); 
setTile (4, 5, 4, 0); 
setTile (5, 5, 1, 173); 
setTile (1, 5, 5, 173); 
setTile (2, 5, 5, 0); 
setTile (5, 5, 2, 0); 
setTile (3, 5, 5, 0); 
setTile (5, 5, 3, 0); 
setTile (4, 5, 5, 0); 
setTile (5, 5, 4, 0); 
setTile (5, 5, 5, 0); 
setTile (7, 5, 7, 173); 
setTile (7, 5, 1, 173); 
setTile (1, 5, 7, 173); 
setTile (7, 5, 2, 173); 
setTile (2, 5, 7, 173); 
setTile (3, 5, 7, 173); 
setTile (7, 5, 3, 173); 
setTile (4, 5, 7, 173); 
setTile (7, 5, 4, 173); 
setTile (5, 5, 7, 173); 
setTile (7, 5, 5, 173); 
setTile (6, 5, 7, 173); 
setTile (7, 5, 6, 173); 
setTile (6, 5, 5, 0); 
setTile (5, 5, 6, 0); 
setTile (4, 5, 6, 0); 
setTile (6, 5, 4, 0); 
setTile (3, 5, 6, 0); 
setTile (6, 5, 3, 0); 
setTile (6, 5, 2, 0); 
setTile (2, 5, 6, 0); 
setTile (1, 5, 6, 173); 
setTile (6, 5, 1, 173); 
setTile (6, 5, 6, 173);
setTile (1, 6, 1, 173); 
setTile (1, 6, 2, 173); 
setTile (2, 6, 1, 173); 
setTile (2, 6, 2, 173); 
setTile (3, 6, 1, 173); 
setTile (1, 6, 3, 173); 
setTile (2, 6, 3, 173); 
setTile (3, 6, 2, 173); 
setTile (3, 6, 3, 173); 
setTile (4, 6, 1, 173); 
setTile (1, 6, 4, 173); 
setTile (2, 6, 4, 173); 
setTile (4, 6, 2, 173); 
setTile (3, 6, 4, 173); 
setTile (4, 6, 3, 173); 
setTile (4, 6, 4, 173); 
setTile (5, 6, 1, 173); 
setTile (1, 6, 5, 173); 
setTile (2, 6, 5, 173); 
setTile (5, 6, 2, 173); 
setTile (3, 6, 5, 173); 
setTile (5, 6, 3, 173); 
setTile (4, 6, 5, 173); 
setTile (5, 6, 4, 173); 
setTile (5, 6, 5, 173); 
setTile (7, 6, 7, 173); 
setTile (7, 6, 1, 173); 
setTile (1, 6, 7, 173); 
setTile (7, 6, 2, 173); 
setTile (2, 6, 7, 173); 
setTile (3, 6, 7, 173); 
setTile (7, 6, 3, 173); 
setTile (4, 6, 7, 173); 
setTile (7, 6, 4, 173); 
setTile (5, 6, 7, 173); 
setTile (7, 6, 5, 173); 
setTile (6, 6, 7, 173); 
setTile (7, 6, 6, 173); 
setTile (6, 6, 5, 173); 
setTile (5, 6, 6, 173); 
setTile (4, 6, 6, 173); 
setTile (6, 6, 4, 173); 
setTile (3, 6, 6, 173); 
setTile (6, 6, 3, 173); 
setTile (6, 6, 2, 173); 
setTile (2, 6, 6, 173); 
setTile (1, 6, 6, 173); 
setTile (6, 6, 1, 173); 
setTile (6, 6, 6, 173); 
setPosition(getPlayerEnt(), 5, 4, 5); 
dream = 1; 
setTile(4, 2, 2, 245);
Level.dropItem(4, 3, 2, 1, 49, 1, 0);
clientMessage("am i dreaming....");
Player.setHealth(20);
return; 
} else if (random == 4) {
	 clientMessage("Nitey Nite");
    if(Vampire==2)
{
preventDefault();
clientMessage("a stillness comes from under the covers...  .... ...");
}
} else if (random == 5) {
	 preventDefault();
Px = getPlayerX(); 
Py = getPlayerY(); 
Pz = getPlayerZ(); 
setTile (1, 1, 1, 173); 
setTile (1, 1, 2, 173); 
setTile (2, 1, 1, 173); 
setTile (2, 1, 2, 173); 
setTile (3, 1, 1, 173); 
setTile (1, 1, 3, 173); 
setTile (2, 1, 3, 173); 
setTile (3, 1, 2, 173); 
setTile (3, 1, 3, 173); 
setTile (4, 1, 1, 173); 
setTile (1, 1, 4, 173); 
setTile (2, 1, 4, 173); 
setTile (4, 1, 2, 173); 
setTile (3, 1, 4, 173); 
setTile (4, 1, 3, 173); 
setTile (4, 1, 4, 173); 
setTile (5, 1, 1, 173); 
setTile (1, 1, 5, 173); 
setTile (2, 1, 5, 173); 
setTile (5, 1, 2, 173); 
setTile (3, 1, 5, 173); 
setTile (5, 1, 3, 173); 
setTile (4, 1, 5, 173); 
setTile (5, 1, 4, 173); 
setTile (5, 1, 5, 173); 
setTile (7, 1, 7, 173); 
setTile (7, 1, 1, 173); 
setTile (1, 1, 7, 173); 
setTile (7, 1, 2, 173); 
setTile (2, 1, 7, 173); 
setTile (3, 1, 7, 173); 
setTile (7, 1, 3, 173); 
setTile (4, 1, 7, 173); 
setTile (7, 1, 4, 173); 
setTile (5, 1, 7, 173); 
setTile (7, 1, 5, 173); 
setTile (6, 1, 7, 173); 
setTile (7, 1, 6, 173); 
setTile (6, 1, 5, 173); 
setTile (5, 1, 6, 173); 
setTile (4, 1, 6, 173); 
setTile (6, 1, 4, 173); 
setTile (3, 1, 6, 173); 
setTile (6, 1, 3, 173); 
setTile (6, 1, 2, 173); 
setTile (2, 1, 6, 173); 
setTile (1, 1, 6, 173); 
setTile (6, 1, 1, 173); 
setTile (6, 1, 6, 173); 
setTile (1, 2, 1, 173); 
setTile (1, 2, 2, 173); 
setTile (2, 2, 1, 173); 
setTile (2, 2, 2, 0); 
setTile (3, 2, 1, 173); 
setTile (1, 2, 3, 173); 
setTile (2, 2, 3, 0); 
setTile (3, 2, 2, 0); 
setTile (3, 2, 3, 0); 
setTile (4, 2, 1, 173); 
setTile (1, 2, 4, 173); 
setTile (2, 2, 4, 0); 
setTile (3, 2, 4, 0); 
setTile (4, 2, 3, 0); 
setTile (4, 2, 4, 0); 
setTile (5, 2, 1, 173); 
setTile (1, 2, 5, 173); 
setTile (2, 2, 5, 0); 
setTile (5, 2, 2, 0); 
setTile (3, 2, 5, 0); 
setTile (5, 2, 3, 0); 
setTile (4, 2, 5, 0); 
setTile (5, 2, 4, 0); 
setTile (5, 2, 5, 0); 
setTile (7, 2, 7, 173); 
setTile (7, 2, 1, 173); 
setTile (1, 2, 7, 173); 
setTile (7, 2, 2, 173); 
setTile (2, 2, 7, 173); 
setTile (3, 2, 7, 173); 
setTile (7, 2, 3, 173); 
setTile (4, 2, 7, 173); 
setTile (7, 2, 4, 173); 
setTile (5, 2, 7, 173); 
setTile (7, 2, 5, 173); 
setTile (6, 2, 7, 173); 
setTile (7, 2, 6, 173); 
setTile (6, 2, 5, 0); 
setTile (5, 2, 6, 0); 
setTile (4, 2, 6, 0); 
setTile (6, 2, 4, 0); 
setTile (3, 2, 6, 0); 
setTile (6, 2, 3, 0); 
setTile (6, 2, 2, 0); 
setTile (2, 2, 6, 0); 
setTile (1, 2, 6, 173); 
setTile (6, 2, 1, 173); 
setTile (6, 2, 6, 0); 
setTile (1, 3, 1, 173); 
setTile (1, 3, 2, 173); 
setTile (2, 3, 1, 173); 
setTile (2, 3, 2, 0); 
setTile (3, 3, 1, 173); 
setTile (1, 3, 3, 173); 
setTile (2, 3, 3, 0); 
setTile (3, 3, 2, 0); 
setTile (3, 3, 3, 0); 
setTile (4, 3, 1, 173); 
setTile (1, 3, 4, 173); 
setTile (2, 3, 4, 0); 
setTile (4, 3, 2, 0); 
setTile (3, 3, 4, 0); 
setTile (4, 3, 3, 0); 
setTile (4, 3, 4, 0); 
setTile (5, 3, 1, 173); 
setTile (1, 3, 5, 173); 
setTile (2, 3, 5, 0); 
setTile (5, 3, 2, 0); 
setTile (3, 3, 5, 0); 
setTile (5, 3, 3, 0); 
setTile (4, 3, 5, 0); 
setTile (5, 3, 4, 0); 
setTile (5, 3, 5, 0); 
setTile (7, 3, 7, 173); 
setTile (7, 3, 1, 173); 
setTile (1, 3, 7, 173); 
setTile (7, 3, 2, 173); 
setTile (2, 3, 7, 173); 
setTile (3, 3, 7, 173); 
setTile (7, 3, 3, 173); 
setTile (4, 3, 7, 173); 
setTile (7, 3, 4, 173); 
setTile (5, 3, 7, 173); 
setTile (7, 3, 5, 173); 
setTile (6, 3, 7, 173); 
setTile (7, 3, 6, 173); 
setTile (6, 3, 5, 0); 
setTile (5, 3, 6, 0); 
setTile (4, 3, 6, 0); 
setTile (6, 3, 4, 0); 
setTile (3, 3, 6, 0); 
setTile (6, 3, 3, 0); 
setTile (6, 3, 2, 0); 
setTile (2, 3, 6, 0); 
setTile (1, 3, 6, 173); 
setTile (6, 3, 1, 173); 
setTile (6, 3, 6, 0); 
setTile (1, 4, 1, 173); 
setTile (1, 4, 2, 173); 
setTile (2, 4, 1, 173); 
setTile (2, 4, 2, 0); 
setTile (3, 4, 1, 173); 
setTile (1, 4, 3, 173); 
setTile (2, 4, 3, 0); 
setTile (3, 4, 2, 0); 
setTile (3, 4, 3, 0); 
setTile (4, 4, 1, 173); 
setTile (1, 4, 4, 173); 
setTile (2, 4, 4, 0); 
setTile (4, 4, 2, 0); 
setTile (3, 4, 4, 0); 
setTile (4, 4, 3, 0); 
setTile (4, 4, 4, 0); 
setTile (5, 4, 1, 173); 
setTile (1, 4, 5, 173); 
setTile (2, 4, 5, 0); 
setTile (5, 4, 2, 0); 
setTile (3, 4, 5, 0); 
setTile (5, 4, 3, 0); 
setTile (4, 4, 5, 0); 
setTile (5, 4, 4, 0); 
setTile (5, 4, 5, 0); 
setTile (7, 4, 7, 173); 
setTile (7, 4, 1, 173); 
setTile (1, 4, 7, 173); 
setTile (7, 4, 2, 173); 
setTile (2, 4, 7, 173); 
setTile (3, 4, 7, 173); 
setTile (7, 4, 3, 173); 
setTile (4, 4, 7, 173); 
setTile (7, 4, 4, 173); 
setTile (5, 4, 7, 173); 
setTile (7, 4, 5, 173); 
setTile (6, 4, 7, 173); 
setTile (7, 4, 6, 173); 
setTile (6, 4, 5, 0); 
setTile (5, 4, 6, 0); 
setTile (4, 4, 6, 0); 
setTile (6, 4, 4, 0); 
setTile (3, 4, 6, 0); 
setTile (6, 4, 3, 0); 
setTile (6, 4, 2, 0); 
setTile (2, 4, 6, 0); 
setTile (1, 4, 6, 173); 
setTile (6, 4, 1, 173); 
setTile (6, 4, 6, 0); 
setTile (1, 5, 1, 173); 
setTile (1, 5, 2, 173); 
setTile (2, 5, 1, 173); 
setTile (2, 5, 2, 0); 
setTile (3, 5, 1, 173); 
setTile (1, 5, 3, 173); 
setTile (2, 5, 3, 0); 
setTile (3, 5, 2, 0); 
setTile (3, 5, 3, 0); 
setTile (4, 5, 1, 173); 
setTile (1, 5, 4, 173); 
setTile (2, 5, 4, 0); 
setTile (4, 5, 2, 0); 
setTile (3, 5, 4, 0); 
setTile (4, 5, 3, 0); 
setTile (4, 5, 4, 0); 
setTile (5, 5, 1, 173); 
setTile (1, 5, 5, 173); 
setTile (2, 5, 5, 0); 
setTile (5, 5, 2, 0); 
setTile (3, 5, 5, 0); 
setTile (5, 5, 3, 0); 
setTile (4, 5, 5, 0); 
setTile (5, 5, 4, 0); 
setTile (5, 5, 5, 0); 
setTile (7, 5, 7, 173); 
setTile (7, 5, 1, 173); 
setTile (1, 5, 7, 173); 
setTile (7, 5, 2, 173); 
setTile (2, 5, 7, 173); 
setTile (3, 5, 7, 173); 
setTile (7, 5, 3, 173); 
setTile (4, 5, 7, 173); 
setTile (7, 5, 4, 173); 
setTile (5, 5, 7, 173); 
setTile (7, 5, 5, 173); 
setTile (6, 5, 7, 173); 
setTile (7, 5, 6, 173); 
setTile (6, 5, 5, 0); 
setTile (5, 5, 6, 0); 
setTile (4, 5, 6, 0); 
setTile (6, 5, 4, 0); 
setTile (3, 5, 6, 0); 
setTile (6, 5, 3, 0); 
setTile (6, 5, 2, 0); 
setTile (2, 5, 6, 0); 
setTile (1, 5, 6, 173); 
setTile (6, 5, 1, 173); 
setTile (6, 5, 6, 173);
setTile (1, 6, 1, 173); 
setTile (1, 6, 2, 173); 
setTile (2, 6, 1, 173); 
setTile (2, 6, 2, 173); 
setTile (3, 6, 1, 173); 
setTile (1, 6, 3, 173); 
setTile (2, 6, 3, 173); 
setTile (3, 6, 2, 173); 
setTile (3, 6, 3, 173); 
setTile (4, 6, 1, 173); 
setTile (1, 6, 4, 173); 
setTile (2, 6, 4, 173); 
setTile (4, 6, 2, 173); 
setTile (3, 6, 4, 173); 
setTile (4, 6, 3, 173); 
setTile (4, 6, 4, 173); 
setTile (5, 6, 1, 173); 
setTile (1, 6, 5, 173); 
setTile (2, 6, 5, 173); 
setTile (5, 6, 2, 173); 
setTile (3, 6, 5, 173); 
setTile (5, 6, 3, 173); 
setTile (4, 6, 5, 173); 
setTile (5, 6, 4, 173); 
setTile (5, 6, 5, 173); 
setTile (7, 6, 7, 173); 
setTile (7, 6, 1, 173); 
setTile (1, 6, 7, 173); 
setTile (7, 6, 2, 173); 
setTile (2, 6, 7, 173); 
setTile (3, 6, 7, 173); 
setTile (7, 6, 3, 173); 
setTile (4, 6, 7, 173); 
setTile (7, 6, 4, 173); 
setTile (5, 6, 7, 173); 
setTile (7, 6, 5, 173); 
setTile (6, 6, 7, 173); 
setTile (7, 6, 6, 173); 
setTile (6, 6, 5, 173); 
setTile (5, 6, 6, 173); 
setTile (4, 6, 6, 173); 
setTile (6, 6, 4, 173); 
setTile (3, 6, 6, 173); 
setTile (6, 6, 3, 173); 
setTile (6, 6, 2, 173); 
setTile (2, 6, 6, 173); 
setTile (1, 6, 6, 173); 
setTile (6, 6, 1, 173); 
setTile (6, 6, 6, 173); 
setPosition(getPlayerEnt(), 5, 4, 5); 
dream = 1; 
setTile(4, 2, 2, 54);
clientMessage("am i dreaming....");
Player.setHealth(20);
return;
} else if (random == 6) {
	 clientMessage("Nitey Nite");
    if(Vampire==2)
{
preventDefault();
clientMessage("you hear a whisper..  nichtoe.  ... .. .   .   .");
}
}
}
if(blockId == 246 && dream == 1)
{
setTile(x,y,z,0);
Level.dropItem(x, y, z, 1, 260, 1, 0); 
}
if(itemId == 260 && dream == 1)
{
dream = 0;
setPosition(getPlayerEnt(), Px, Py, Pz);
Level.setTime(0);
if(Vampire==2)
{
Level.setTime(29388);
Player.setHealth(20);
}
}
if(itemId == 49 && blockId == 245 && dream == 1)
{
preventDefault();
dream = 0;
addItemInventory(49,-1);
setPosition(getPlayerEnt(), Px, Py, Pz);
Level.setTime(0);
if(Vampire==2)
{
Level.setTime(29388);
Player.setHealth(20);
}
}
if(blockId == 54 && dream == 1)
{
preventDefault();
setTile(x,y,z,0);
Level.spawnMob(x, y+1, z, 35);
Level.spawnMob(x, y+1, z, 35);
clientMessage("AAAAAAAAHHHHH!!!!!");
}
if(itemId == 287 && dream == 1)
{
dream = 0;
Player.setHealth(20);
setPosition(getPlayerEnt(), Px, Py, Pz);
Level.setTime(0);
if(Vampire==2)
{
Level.setTime(29388);
Player.setHealth(20);
}
}
if (blockId == 26 && dream == 1)
{
dream = 0;
clientMessage("that was eerie...");
}
if(blockId == 1 && dream == 1)
{
dream = 0;
Player.setHealth(20);
setPosition(getPlayerEnt(), Px, Py, Pz);
Level.setTime(0);
if(Vampire==2)
{
Level.setTime(29388);
Player.setHealth(20);
}
}

if(itemId == 424 && blockId == 246 && getTile(x+1, y+1, z) == 50 && getTile(x-1, y+1, z) == 50 && getTile(x, y+1, z+1) == 50 && getTile(x, y+1, z-1) == 50 && Vampire == 2 && shelf > 1000)
{
clientMessage(ChatColor.BLACK + "Rituale SpideWick Hound");
Entity.setRenderType(Player.getEntity(), 8);
Entity.setMobSkin(Player.getEntity(), "mob/spider.png");
pig = true;
}

if(itemId == 385 && blockId == 64 && getTile(x,y+2,z) == 173 && getTile(x,y-1,z) == 173 && prime == false && Vampire == 2)
{
clientMessage("the door creaks.....");
addItemInventory(385,-1);
prime = true;
}

if(itemId == 263 && blockId == 64 && getTile(x,y+2,z) == 173 && getTile(x,y-1,z) == 173)
{
     prime = false;
     addItemInventory(263,-1);
     preventDefault();
Px = getPlayerX(); 
Py = getPlayerY(); 
Pz = getPlayerZ(); 
setTile (1, 1, 1, 173); 
setTile (1, 1, 2, 173); 
setTile (2, 1, 1, 173); 
setTile (2, 1, 2, 173); 
setTile (3, 1, 1, 173); 
setTile (1, 1, 3, 173); 
setTile (2, 1, 3, 173); 
setTile (3, 1, 2, 173); 
setTile (3, 1, 3, 173); 
setTile (4, 1, 1, 173); 
setTile (1, 1, 4, 173); 
setTile (2, 1, 4, 173); 
setTile (4, 1, 2, 173); 
setTile (3, 1, 4, 173); 
setTile (4, 1, 3, 173); 
setTile (4, 1, 4, 173); 
setTile (5, 1, 1, 173); 
setTile (1, 1, 5, 173); 
setTile (2, 1, 5, 173); 
setTile (5, 1, 2, 173); 
setTile (3, 1, 5, 173); 
setTile (5, 1, 3, 173); 
setTile (4, 1, 5, 173); 
setTile (5, 1, 4, 173); 
setTile (5, 1, 5, 173); 
setTile (7, 1, 7, 173); 
setTile (7, 1, 1, 173); 
setTile (1, 1, 7, 173); 
setTile (7, 1, 2, 173); 
setTile (2, 1, 7, 173); 
setTile (3, 1, 7, 173); 
setTile (7, 1, 3, 173); 
setTile (4, 1, 7, 173); 
setTile (7, 1, 4, 173); 
setTile (5, 1, 7, 173); 
setTile (7, 1, 5, 173); 
setTile (6, 1, 7, 173); 
setTile (7, 1, 6, 173); 
setTile (6, 1, 5, 173); 
setTile (5, 1, 6, 173); 
setTile (4, 1, 6, 173); 
setTile (6, 1, 4, 173); 
setTile (3, 1, 6, 173); 
setTile (6, 1, 3, 173); 
setTile (6, 1, 2, 173); 
setTile (2, 1, 6, 173); 
setTile (1, 1, 6, 173); 
setTile (6, 1, 1, 173); 
setTile (6, 1, 6, 173); 
setTile (1, 2, 1, 173); 
setTile (1, 2, 2, 173); 
setTile (2, 2, 1, 173); 
setTile (2, 2, 2, 0); 
setTile (3, 2, 1, 173); 
setTile (1, 2, 3, 173); 
setTile (2, 2, 3, 0); 
setTile (3, 2, 2, 0); 
setTile (3, 2, 3, 0); 
setTile (4, 2, 1, 173); 
setTile (1, 2, 4, 173); 
setTile (2, 2, 4, 0); 
setTile (3, 2, 4, 0); 
setTile (4, 2, 3, 0); 
setTile (4, 2, 4, 0); 
setTile (5, 2, 1, 173); 
setTile (1, 2, 5, 173); 
setTile (2, 2, 5, 0); 
setTile (5, 2, 2, 0); 
setTile (3, 2, 5, 0); 
setTile (5, 2, 3, 0); 
setTile (4, 2, 5, 0); 
setTile (5, 2, 4, 0); 
setTile (5, 2, 5, 0); 
setTile (7, 2, 7, 173); 
setTile (7, 2, 1, 173); 
setTile (1, 2, 7, 173); 
setTile (7, 2, 2, 173); 
setTile (2, 2, 7, 173); 
setTile (3, 2, 7, 173); 
setTile (7, 2, 3, 173); 
setTile (4, 2, 7, 173); 
setTile (7, 2, 4, 173); 
setTile (5, 2, 7, 173); 
setTile (7, 2, 5, 173); 
setTile (6, 2, 7, 173); 
setTile (7, 2, 6, 173); 
setTile (6, 2, 5, 0); 
setTile (5, 2, 6, 0); 
setTile (4, 2, 6, 0); 
setTile (6, 2, 4, 0); 
setTile (3, 2, 6, 0); 
setTile (6, 2, 3, 0); 
setTile (6, 2, 2, 0); 
setTile (2, 2, 6, 0); 
setTile (1, 2, 6, 173); 
setTile (6, 2, 1, 173); 
setTile (6, 2, 6, 0); 
setTile (1, 3, 1, 173); 
setTile (1, 3, 2, 173); 
setTile (2, 3, 1, 173); 
setTile (2, 3, 2, 0); 
setTile (3, 3, 1, 173); 
setTile (1, 3, 3, 173); 
setTile (2, 3, 3, 0); 
setTile (3, 3, 2, 0); 
setTile (3, 3, 3, 0); 
setTile (4, 3, 1, 173); 
setTile (1, 3, 4, 173); 
setTile (2, 3, 4, 0); 
setTile (4, 3, 2, 0); 
setTile (3, 3, 4, 0); 
setTile (4, 3, 3, 0); 
setTile (4, 3, 4, 0); 
setTile (5, 3, 1, 173); 
setTile (1, 3, 5, 173); 
setTile (2, 3, 5, 0); 
setTile (5, 3, 2, 0); 
setTile (3, 3, 5, 0); 
setTile (5, 3, 3, 0); 
setTile (4, 3, 5, 0); 
setTile (5, 3, 4, 0); 
setTile (5, 3, 5, 0); 
setTile (7, 3, 7, 173); 
setTile (7, 3, 1, 173); 
setTile (1, 3, 7, 173); 
setTile (7, 3, 2, 173); 
setTile (2, 3, 7, 173); 
setTile (3, 3, 7, 173); 
setTile (7, 3, 3, 173); 
setTile (4, 3, 7, 173); 
setTile (7, 3, 4, 173); 
setTile (5, 3, 7, 173); 
setTile (7, 3, 5, 173); 
setTile (6, 3, 7, 173); 
setTile (7, 3, 6, 173); 
setTile (6, 3, 5, 0); 
setTile (5, 3, 6, 0); 
setTile (4, 3, 6, 0); 
setTile (6, 3, 4, 0); 
setTile (3, 3, 6, 0); 
setTile (6, 3, 3, 0); 
setTile (6, 3, 2, 0); 
setTile (2, 3, 6, 0); 
setTile (1, 3, 6, 173); 
setTile (6, 3, 1, 173); 
setTile (6, 3, 6, 0); 
setTile (1, 4, 1, 173); 
setTile (1, 4, 2, 173); 
setTile (2, 4, 1, 173); 
setTile (2, 4, 2, 0); 
setTile (3, 4, 1, 173); 
setTile (1, 4, 3, 173); 
setTile (2, 4, 3, 0); 
setTile (3, 4, 2, 0); 
setTile (3, 4, 3, 0); 
setTile (4, 4, 1, 173); 
setTile (1, 4, 4, 173); 
setTile (2, 4, 4, 0); 
setTile (4, 4, 2, 0); 
setTile (3, 4, 4, 0); 
setTile (4, 4, 3, 0); 
setTile (4, 4, 4, 0); 
setTile (5, 4, 1, 173); 
setTile (1, 4, 5, 173); 
setTile (2, 4, 5, 0); 
setTile (5, 4, 2, 0); 
setTile (3, 4, 5, 0); 
setTile (5, 4, 3, 0); 
setTile (4, 4, 5, 0); 
setTile (5, 4, 4, 0); 
setTile (5, 4, 5, 0); 
setTile (7, 4, 7, 173); 
setTile (7, 4, 1, 173); 
setTile (1, 4, 7, 173); 
setTile (7, 4, 2, 173); 
setTile (2, 4, 7, 173); 
setTile (3, 4, 7, 173); 
setTile (7, 4, 3, 173); 
setTile (4, 4, 7, 173); 
setTile (7, 4, 4, 173); 
setTile (5, 4, 7, 173); 
setTile (7, 4, 5, 173); 
setTile (6, 4, 7, 173); 
setTile (7, 4, 6, 173); 
setTile (6, 4, 5, 0); 
setTile (5, 4, 6, 0); 
setTile (4, 4, 6, 0); 
setTile (6, 4, 4, 0); 
setTile (3, 4, 6, 0); 
setTile (6, 4, 3, 0); 
setTile (6, 4, 2, 0); 
setTile (2, 4, 6, 0); 
setTile (1, 4, 6, 173); 
setTile (6, 4, 1, 173); 
setTile (6, 4, 6, 0); 
setTile (1, 5, 1, 173); 
setTile (1, 5, 2, 173); 
setTile (2, 5, 1, 173); 
setTile (2, 5, 2, 0); 
setTile (3, 5, 1, 173); 
setTile (1, 5, 3, 173); 
setTile (2, 5, 3, 0); 
setTile (3, 5, 2, 0); 
setTile (3, 5, 3, 0); 
setTile (4, 5, 1, 173); 
setTile (1, 5, 4, 173); 
setTile (2, 5, 4, 0); 
setTile (4, 5, 2, 0); 
setTile (3, 5, 4, 0); 
setTile (4, 5, 3, 0); 
setTile (4, 5, 4, 0); 
setTile (5, 5, 1, 173); 
setTile (1, 5, 5, 173); 
setTile (2, 5, 5, 0); 
setTile (5, 5, 2, 0); 
setTile (3, 5, 5, 0); 
setTile (5, 5, 3, 0); 
setTile (4, 5, 5, 0); 
setTile (5, 5, 4, 0); 
setTile (5, 5, 5, 0); 
setTile (7, 5, 7, 173); 
setTile (7, 5, 1, 173); 
setTile (1, 5, 7, 173); 
setTile (7, 5, 2, 173); 
setTile (2, 5, 7, 173); 
setTile (3, 5, 7, 173); 
setTile (7, 5, 3, 173); 
setTile (4, 5, 7, 173); 
setTile (7, 5, 4, 173); 
setTile (5, 5, 7, 173); 
setTile (7, 5, 5, 173); 
setTile (6, 5, 7, 173); 
setTile (7, 5, 6, 173); 
setTile (6, 5, 5, 0); 
setTile (5, 5, 6, 0); 
setTile (4, 5, 6, 0); 
setTile (6, 5, 4, 0); 
setTile (3, 5, 6, 0); 
setTile (6, 5, 3, 0); 
setTile (6, 5, 2, 0); 
setTile (2, 5, 6, 0); 
setTile (1, 5, 6, 173); 
setTile (6, 5, 1, 173); 
setTile (6, 5, 6, 173);
setTile (1, 6, 1, 173); 
setTile (1, 6, 2, 173); 
setTile (2, 6, 1, 173); 
setTile (2, 6, 2, 173); 
setTile (3, 6, 1, 173); 
setTile (1, 6, 3, 173); 
setTile (2, 6, 3, 173); 
setTile (3, 6, 2, 173); 
setTile (3, 6, 3, 173); 
setTile (4, 6, 1, 173); 
setTile (1, 6, 4, 173); 
setTile (2, 6, 4, 173); 
setTile (4, 6, 2, 173); 
setTile (3, 6, 4, 173); 
setTile (4, 6, 3, 173); 
setTile (4, 6, 4, 173); 
setTile (5, 6, 1, 173); 
setTile (1, 6, 5, 173); 
setTile (2, 6, 5, 173); 
setTile (5, 6, 2, 173); 
setTile (3, 6, 5, 173); 
setTile (5, 6, 3, 173); 
setTile (4, 6, 5, 173); 
setTile (5, 6, 4, 173); 
setTile (5, 6, 5, 173); 
setTile (7, 6, 7, 173); 
setTile (7, 6, 1, 173); 
setTile (1, 6, 7, 173); 
setTile (7, 6, 2, 173); 
setTile (2, 6, 7, 173); 
setTile (3, 6, 7, 173); 
setTile (7, 6, 3, 173); 
setTile (4, 6, 7, 173); 
setTile (7, 6, 4, 173); 
setTile (5, 6, 7, 173); 
setTile (7, 6, 5, 173); 
setTile (6, 6, 7, 173); 
setTile (7, 6, 6, 173); 
setTile (6, 6, 5, 173); 
setTile (5, 6, 6, 173); 
setTile (4, 6, 6, 173); 
setTile (6, 6, 4, 173); 
setTile (3, 6, 6, 173); 
setTile (6, 6, 3, 173); 
setTile (6, 6, 2, 173); 
setTile (2, 6, 6, 173); 
setTile (1, 6, 6, 173); 
setTile (6, 6, 1, 173); 
setTile (6, 6, 6, 173); 
setPosition(getPlayerEnt(), 5, 4, 5); 
room = 1; 
setTile(3, 2, 2, 245);
setTile(4, 2, 2, 58);
setTile(5, 2, 2, 47);
setTile(0, 0, 0, 54);
setTile(0, 1, 0, 0);
setTile(1, 0, 0, 0);
setTile(0, 0, 1, 0);
setTile(1, 1, 0, 0);
setTile(0, 1, 1, 0);
addItemInventory(50,4);
addItemInventory(339,35);
addItemInventory(340,5);
addItemInventory(264,1);
addItemInventory(260,1);
clientMessage("*Coal Room*");
return;
}
if(itemId == 375 && blockId == 64 && getTile(x,y+2,z) == 173 && getTile(x,y-1,z) == 173 && prime == true && Vampire == 2)
{
     prime = false;
     addItemInventory(375,-1);
     addItemInventory(424,1);
     preventDefault();
Px = getPlayerX(); 
Py = getPlayerY(); 
Pz = getPlayerZ(); 
setTile (1, 1, 1, 173); 
setTile (1, 1, 2, 173); 
setTile (2, 1, 1, 173); 
setTile (2, 1, 2, 173); 
setTile (3, 1, 1, 173); 
setTile (1, 1, 3, 173); 
setTile (2, 1, 3, 173); 
setTile (3, 1, 2, 173); 
setTile (3, 1, 3, 173); 
setTile (4, 1, 1, 173); 
setTile (1, 1, 4, 173); 
setTile (2, 1, 4, 173); 
setTile (4, 1, 2, 173); 
setTile (3, 1, 4, 173); 
setTile (4, 1, 3, 173); 
setTile (4, 1, 4, 173); 
setTile (5, 1, 1, 173); 
setTile (1, 1, 5, 173); 
setTile (2, 1, 5, 173); 
setTile (5, 1, 2, 173); 
setTile (3, 1, 5, 173); 
setTile (5, 1, 3, 173); 
setTile (4, 1, 5, 173); 
setTile (5, 1, 4, 173); 
setTile (5, 1, 5, 173); 
setTile (7, 1, 7, 173); 
setTile (7, 1, 1, 173); 
setTile (1, 1, 7, 173); 
setTile (7, 1, 2, 173); 
setTile (2, 1, 7, 173); 
setTile (3, 1, 7, 173); 
setTile (7, 1, 3, 173); 
setTile (4, 1, 7, 173); 
setTile (7, 1, 4, 173); 
setTile (5, 1, 7, 173); 
setTile (7, 1, 5, 173); 
setTile (6, 1, 7, 173); 
setTile (7, 1, 6, 173); 
setTile (6, 1, 5, 173); 
setTile (5, 1, 6, 173); 
setTile (4, 1, 6, 173); 
setTile (6, 1, 4, 173); 
setTile (3, 1, 6, 173); 
setTile (6, 1, 3, 173); 
setTile (6, 1, 2, 173); 
setTile (2, 1, 6, 173); 
setTile (1, 1, 6, 173); 
setTile (6, 1, 1, 173); 
setTile (6, 1, 6, 173); 
setTile (1, 2, 1, 173); 
setTile (1, 2, 2, 173); 
setTile (2, 2, 1, 173); 
setTile (2, 2, 2, 0); 
setTile (3, 2, 1, 173); 
setTile (1, 2, 3, 173); 
setTile (2, 2, 3, 0); 
setTile (3, 2, 2, 0); 
setTile (3, 2, 3, 0); 
setTile (4, 2, 1, 173); 
setTile (1, 2, 4, 173); 
setTile (2, 2, 4, 0); 
setTile (3, 2, 4, 0); 
setTile (4, 2, 3, 0); 
setTile (4, 2, 4, 0); 
setTile (5, 2, 1, 173); 
setTile (1, 2, 5, 173); 
setTile (2, 2, 5, 0); 
setTile (5, 2, 2, 0); 
setTile (3, 2, 5, 0); 
setTile (5, 2, 3, 0); 
setTile (4, 2, 5, 0); 
setTile (5, 2, 4, 0); 
setTile (5, 2, 5, 0); 
setTile (7, 2, 7, 173); 
setTile (7, 2, 1, 173); 
setTile (1, 2, 7, 173); 
setTile (7, 2, 2, 173); 
setTile (2, 2, 7, 173); 
setTile (3, 2, 7, 173); 
setTile (7, 2, 3, 173); 
setTile (4, 2, 7, 173); 
setTile (7, 2, 4, 173); 
setTile (5, 2, 7, 173); 
setTile (7, 2, 5, 173); 
setTile (6, 2, 7, 173); 
setTile (7, 2, 6, 173); 
setTile (6, 2, 5, 0); 
setTile (5, 2, 6, 0); 
setTile (4, 2, 6, 0); 
setTile (6, 2, 4, 0); 
setTile (3, 2, 6, 0); 
setTile (6, 2, 3, 0); 
setTile (6, 2, 2, 0); 
setTile (2, 2, 6, 0); 
setTile (1, 2, 6, 173); 
setTile (6, 2, 1, 173); 
setTile (6, 2, 6, 0); 
setTile (1, 3, 1, 173); 
setTile (1, 3, 2, 173); 
setTile (2, 3, 1, 173); 
setTile (2, 3, 2, 0); 
setTile (3, 3, 1, 173); 
setTile (1, 3, 3, 173); 
setTile (2, 3, 3, 0); 
setTile (3, 3, 2, 0); 
setTile (3, 3, 3, 0); 
setTile (4, 3, 1, 173); 
setTile (1, 3, 4, 173); 
setTile (2, 3, 4, 0); 
setTile (4, 3, 2, 0); 
setTile (3, 3, 4, 0); 
setTile (4, 3, 3, 0); 
setTile (4, 3, 4, 0); 
setTile (5, 3, 1, 173); 
setTile (1, 3, 5, 173); 
setTile (2, 3, 5, 0); 
setTile (5, 3, 2, 0); 
setTile (3, 3, 5, 0); 
setTile (5, 3, 3, 0); 
setTile (4, 3, 5, 0); 
setTile (5, 3, 4, 0); 
setTile (5, 3, 5, 0); 
setTile (7, 3, 7, 173); 
setTile (7, 3, 1, 173); 
setTile (1, 3, 7, 173); 
setTile (7, 3, 2, 173); 
setTile (2, 3, 7, 173); 
setTile (3, 3, 7, 173); 
setTile (7, 3, 3, 173); 
setTile (4, 3, 7, 173); 
setTile (7, 3, 4, 173); 
setTile (5, 3, 7, 173); 
setTile (7, 3, 5, 173); 
setTile (6, 3, 7, 173); 
setTile (7, 3, 6, 173); 
setTile (6, 3, 5, 0); 
setTile (5, 3, 6, 0); 
setTile (4, 3, 6, 0); 
setTile (6, 3, 4, 0); 
setTile (3, 3, 6, 0); 
setTile (6, 3, 3, 0); 
setTile (6, 3, 2, 0); 
setTile (2, 3, 6, 0); 
setTile (1, 3, 6, 173); 
setTile (6, 3, 1, 173); 
setTile (6, 3, 6, 0); 
setTile (1, 4, 1, 173); 
setTile (1, 4, 2, 173); 
setTile (2, 4, 1, 173); 
setTile (2, 4, 2, 0); 
setTile (3, 4, 1, 173); 
setTile (1, 4, 3, 173); 
setTile (2, 4, 3, 0); 
setTile (3, 4, 2, 0); 
setTile (3, 4, 3, 0); 
setTile (4, 4, 1, 173); 
setTile (1, 4, 4, 173); 
setTile (2, 4, 4, 0); 
setTile (4, 4, 2, 0); 
setTile (3, 4, 4, 0); 
setTile (4, 4, 3, 0); 
setTile (4, 4, 4, 0); 
setTile (5, 4, 1, 173); 
setTile (1, 4, 5, 173); 
setTile (2, 4, 5, 0); 
setTile (5, 4, 2, 0); 
setTile (3, 4, 5, 0); 
setTile (5, 4, 3, 0); 
setTile (4, 4, 5, 0); 
setTile (5, 4, 4, 0); 
setTile (5, 4, 5, 0); 
setTile (7, 4, 7, 173); 
setTile (7, 4, 1, 173); 
setTile (1, 4, 7, 173); 
setTile (7, 4, 2, 173); 
setTile (2, 4, 7, 173); 
setTile (3, 4, 7, 173); 
setTile (7, 4, 3, 173); 
setTile (4, 4, 7, 173); 
setTile (7, 4, 4, 173); 
setTile (5, 4, 7, 173); 
setTile (7, 4, 5, 173); 
setTile (6, 4, 7, 173); 
setTile (7, 4, 6, 173); 
setTile (6, 4, 5, 0); 
setTile (5, 4, 6, 0); 
setTile (4, 4, 6, 0); 
setTile (6, 4, 4, 0); 
setTile (3, 4, 6, 0); 
setTile (6, 4, 3, 0); 
setTile (6, 4, 2, 0); 
setTile (2, 4, 6, 0); 
setTile (1, 4, 6, 173); 
setTile (6, 4, 1, 173); 
setTile (6, 4, 6, 0); 
setTile (1, 5, 1, 173); 
setTile (1, 5, 2, 173); 
setTile (2, 5, 1, 173); 
setTile (2, 5, 2, 0); 
setTile (3, 5, 1, 173); 
setTile (1, 5, 3, 173); 
setTile (2, 5, 3, 0); 
setTile (3, 5, 2, 0); 
setTile (3, 5, 3, 0); 
setTile (4, 5, 1, 173); 
setTile (1, 5, 4, 173); 
setTile (2, 5, 4, 0); 
setTile (4, 5, 2, 0); 
setTile (3, 5, 4, 0); 
setTile (4, 5, 3, 0); 
setTile (4, 5, 4, 0); 
setTile (5, 5, 1, 173); 
setTile (1, 5, 5, 173); 
setTile (2, 5, 5, 0); 
setTile (5, 5, 2, 0); 
setTile (3, 5, 5, 0); 
setTile (5, 5, 3, 0); 
setTile (4, 5, 5, 0); 
setTile (5, 5, 4, 0); 
setTile (5, 5, 5, 0); 
setTile (7, 5, 7, 173); 
setTile (7, 5, 1, 173); 
setTile (1, 5, 7, 173); 
setTile (7, 5, 2, 173); 
setTile (2, 5, 7, 173); 
setTile (3, 5, 7, 173); 
setTile (7, 5, 3, 173); 
setTile (4, 5, 7, 173); 
setTile (7, 5, 4, 173); 
setTile (5, 5, 7, 173); 
setTile (7, 5, 5, 173); 
setTile (6, 5, 7, 173); 
setTile (7, 5, 6, 173); 
setTile (6, 5, 5, 0); 
setTile (5, 5, 6, 0); 
setTile (4, 5, 6, 0); 
setTile (6, 5, 4, 0); 
setTile (3, 5, 6, 0); 
setTile (6, 5, 3, 0); 
setTile (6, 5, 2, 0); 
setTile (2, 5, 6, 0); 
setTile (1, 5, 6, 173); 
setTile (6, 5, 1, 173); 
setTile (6, 5, 6, 173);
setTile (1, 6, 1, 173); 
setTile (1, 6, 2, 173); 
setTile (2, 6, 1, 173); 
setTile (2, 6, 2, 173); 
setTile (3, 6, 1, 173); 
setTile (1, 6, 3, 173); 
setTile (2, 6, 3, 173); 
setTile (3, 6, 2, 173); 
setTile (3, 6, 3, 173); 
setTile (4, 6, 1, 173); 
setTile (1, 6, 4, 173); 
setTile (2, 6, 4, 173); 
setTile (4, 6, 2, 173); 
setTile (3, 6, 4, 173); 
setTile (4, 6, 3, 173); 
setTile (4, 6, 4, 173); 
setTile (5, 6, 1, 173); 
setTile (1, 6, 5, 173); 
setTile (2, 6, 5, 173); 
setTile (5, 6, 2, 173); 
setTile (3, 6, 5, 173); 
setTile (5, 6, 3, 173); 
setTile (4, 6, 5, 173); 
setTile (5, 6, 4, 173); 
setTile (5, 6, 5, 173); 
setTile (7, 6, 7, 173); 
setTile (7, 6, 1, 173); 
setTile (1, 6, 7, 173); 
setTile (7, 6, 2, 173); 
setTile (2, 6, 7, 173); 
setTile (3, 6, 7, 173); 
setTile (7, 6, 3, 173); 
setTile (4, 6, 7, 173); 
setTile (7, 6, 4, 173); 
setTile (5, 6, 7, 173); 
setTile (7, 6, 5, 173); 
setTile (6, 6, 7, 173); 
setTile (7, 6, 6, 173); 
setTile (6, 6, 5, 173); 
setTile (5, 6, 6, 173); 
setTile (4, 6, 6, 173); 
setTile (6, 6, 4, 173); 
setTile (3, 6, 6, 173); 
setTile (6, 6, 3, 173); 
setTile (6, 6, 2, 173); 
setTile (2, 6, 6, 173); 
setTile (1, 6, 6, 173); 
setTile (6, 6, 1, 173); 
setTile (6, 6, 6, 173); 
setPosition(getPlayerEnt(), 5, 4, 5); 
room = 1; 
setTile(3, 2, 2, 245);
setTile(4, 2, 2, 58);
setTile(5, 2, 2, 47);
setTile(0, 0, 0, 54);
setTile(0, 1, 0, 0);
setTile(1, 0, 0, 0);
setTile(0, 0, 1, 0);
setTile(1, 1, 0, 0);
setTile(0, 1, 1, 0);
addItemInventory(50,4);
addItemInventory(339,35);
addItemInventory(340,5);
addItemInventory(264,1);
addItemInventory(260,1);
clientMessage("*Coal Room*");
return;
}
if(itemId == 340 && blockId == 245 && room == 1)
{
preventDefault();
room = 0;
setPosition(getPlayerEnt(), Px, Py, Pz);
}
if(itemId == 424 && blockId == 245 && room == 1)
{
preventDefault();
room = 0;
setPosition(getPlayerEnt(), Px, Py, Pz);
clientMessage(".. .. .. Akhkharu .. .. ..");
}
if(itemId == 339 && blockId == 58 && rsc < 10)
{
preventDefault();
rsc++;
addItemInventory(339,-1);
clientMessage("Study:" + rsc);
}
else if(itemId == 339 && blockId == 58 && rsc == 10)
{
preventDefault();
rsc = 0;
addItemInventory(339,-1);
addItemInventory(340,1);
}
if(itemId == 340 && blockId == 47 && shelf < 1100 && Vampire == 2)
{
shelf++;
addItemInventory(340,-1);
clientMessage("IQ+:" + shelf);
if(shelf==300)
{
clientMessage("Botany Mastered");
}
if(shelf==500)
{
clientMessage("Obtained Ability : Riding the Feather");
}
if(shelf==600)
{
clientMessage("Learned Observer Platforms");
}
if(shelf==700)
{
clientMessage("Learned Alchemy");
}
if(shelf==800)
{
clientMessage("Obtained Ability : Mind Reader");
}
if(shelf==900)
{
clientMessage(" you opened a rift into another dimension, tap a mob with a glass block to trap them there......");
}
if(shelf==1000)
{
clientMessage("Vampiric Maturity Reached!");
}
if(shelf==1099)
{
clientMessage("... you hear snorting from below you . ...  ..  ..");
}
}
if(itemId == 295 && blockId == 2 && shelf > 50)
{
addItemInventory(295,-1);
setTile(x,y+1,z,31,1);
}
if(itemId == 345 && blockId == 20 && shelf > 600 && Vampire == 2)
{
setTile(x, y, z,95);
setTile(x+1, y, z,95);
setTile(x-1, y, z,95);
setTile(x, y, z+1,95);
setTile(x, y, z-1,95);
setTile(x+1, y, z+1,95);
setTile(x+1, y, z-1,95);
setTile(x-1, y, z+1,95);
setTile(x-1, y, z-1,95);
addItemInventory(345,-1);
clientMessage("Observer Initiated");
}
if(blockId ==  20 && shelf > 900 && Vampire == 2)
{
  var Tx = getPlayerX(); 
  var Ty = getPlayerY(); 
  var Tz = getPlayerZ();
  if(trap == 1)
  {
     Level.spawnMob(Tx+1,Ty,Tz,gb1);
     trap = 0;
     gb1 = 0;
  }
  else if(trap == 2)
  {
     Level.spawnMob(Tx+1,Ty,Tz,gb1);
     Level.spawnMob(Tx-1,Ty,Tz,gb2);
     trap = 0;
     gb1 = 0;
     gb2 = 0;
  }
  else if(trap == 3)
  {
     Level.spawnMob(Tx+1,Ty,Tz,gb1);
     Level.spawnMob(Tx-1,Ty,Tz,gb2);
     Level.spawnMob(Tx,Ty,Tz+1,gb3);
     trap = 0;
     gb1 = 0;
     gb2 = 0;
     gb3 = 0;
  }
  else if(trap == 4)
  {
     Level.spawnMob(Tx+1,Ty,Tz,gb1);
     Level.spawnMob(Tx-1,Ty,Tz,gb2);
     Level.spawnMob(Tx,Ty,Tz+1,gb3);
     Level.spawnMob(Tx,Ty,Tz-1,gb4);
     trap = 0;
     gb1 = 0;
     gb2 = 0;
     gb3 = 0;
     gb4 = 0;
  }
  else if(trap == 5)
  {
     Level.spawnMob(Tx+1,Ty,Tz,gb1);
     Level.spawnMob(Tx-1,Ty,Tz,gb2);
     Level.spawnMob(Tx,Ty,Tz+1,gb3);
     Level.spawnMob(Tx,Ty,Tz-1,gb4);
     Level.spawnMob(Tx,Ty,Tz,gb5);
     trap = 0;
     gb1 = 0;
     gb2 = 0;
     gb3 = 0;
     gb4 = 0;
     gb5 = 0;
  }
}
if(itemId == 295 && blockId == 58)
{
preventDefault();
clientMessage("Sprouts Started");
addItemInventory(295,-1);
  if(shelf > 100)
  {
     addItemInventory(37,1);
  }
  if(shelf > 200)
  {
     addItemInventory(6,1);
  }
}
if(itemId == 37 && blockId == 4 && shelf > 300)
{
   setTile(x,y,z,48);
   addItemInventory(37,-1);
}
if(itemId == 260 && blockId == 48 && shelf > 400)
{
   setTile(x,y,z,0);
   addItemInventory(260,-1);
   Level.dropItem(x, y, z, 1, 361, 1, 0);
   Level.dropItem(x, y, z, 1, 361, 1, 0);
   Level.dropItem(x, y, z, 1, 361, 1, 0);
   Level.dropItem(x, y, z, 1, 361, 1, 0);
}
       
// Mining Wand® Kioni

if(itemId==280&&blockId==173)//If your item is a Magic Wand, and the block your using it on is Coal Block
        {
                setTile(x,y,z,0);
                addItemInventory(173,1);
        }
if(itemId==280&&blockId==170)//If your item is a Magic Wand, and the block your using it on is Hay Bail
        {
                setTile(x,y,z,0);
                addItemInventory(170,1);
        }
if(itemId==280&&blockId==58)//If your item is a Magic Wand, and the block your using it on is Crafting Table
        {
                setTile(x,y,z,0);
                addItemInventory(58,1);
        }
if(itemId==280&&blockId==245)//If your item is a Magic Wand, and the block your using it on is Stonecutter
        {
                setTile(x,y,z,0);
                addItemInventory(245,1);
        }
if(itemId==280&&blockId==61)//If your item is a Magic Wand, and the block your using it on is a Furnace
        {
                setTile(x,y,z,0);
                addItemInventory(61,1);
        }
if(itemId==280&&blockId==47)//If your item is a Magic Wand, and the block your using it on is a Bookshelf
        {
                setTile(x,y,z,0);
                clientMessage("**Blessings**");
                addItemInventory(347,1);
                addItemInventory(339,5);
                addItemInventory(340,2);
                addItemInventory(40,5);
                addItemInventory(39,5);
        }
if(itemId==280&&blockId==89)
{  
     if(mine==0)
     { 
         mine = 1;
         clientMessage("Mining Wand Active");
     }
     else if(mine==1)
     {
          mine = 0;
          clientMessage("Mining Wand Off");
     }
}
    if(mine==1)
    {
        if(itemId==280&&blockId==59)
             {
                  setTile(x,y,z,0);
                  setTile(x,y-1,z,60);
                  addItemInventory(296,3);
                  addItemInventory(295,2);
                  addItemInventory(458,2);
             }
        if(itemId==280&&blockId==2)//If your item is a Magic Wand, and the block your using it on is grass
        {
                setTile(x,y,z,0);
        }
        else if(itemId==280&&blockId==3)//If the block we are using is dirt
        {
                setTile(x,y,z,0);
        }
        else if(itemId==280&&blockId==1)//If the block we are using is stone
        {
                setTile(x,y,z,0);
        }
        else if(itemId==280&&blockId==13)//If the block we are using is gravel
        {
                setTile(x,y,z,0);
                addItemInventory(318,1);
        }
        else if(itemId==280&&blockId==16)//If the block we are using is coal ore
        {
                setTile(x,y,z,0);
                addItemInventory(263,3);
        }
        else if(itemId==280&&blockId==15)//If the block we are using is iron ore
        {
                setTile(x,y,z,0);
                addItemInventory(15,1);
        }
        else if(itemId==280&&blockId==21)//If the block we are using is lapis ore
        {
                setTile(x,y,z,0);
                addItemInventory(21,1);
        }
        else if(itemId==280&&blockId==14)//If the block we are using is gold ore
        {
                setTile(x,y,z,0);
                addItemInventory(14,1);
        }
        else if(itemId==280&&blockId==56)//If the block we are using is diamond ore
        {
                setTile(x,y,z,0);
                addItemInventory(56,1);
        }
        else if(itemId==280&&blockId==73)//If the block we are using is redstone ore
        {
                setTile(x,y,z,0);
                addItemInventory(331,3);
                addItemInventory(246,1);
        }
        else if(itemId==280&&blockId==74)//If the block we are using is redstone ore
        {
                setTile(x,y,z,0);
                addItemInventory(331,3);
                addItemInventory(246,3);
        }
        if(itemId==280&&blockId==78)//If your item is a Magic Wand, and the block your using it on is snow
        {
                setTile(x,y,z,0);
                addItemInventory(332,1);
        }
        if(itemId==280&&blockId==80)//If your item is a Magic Wand, and the block your using it on is Snow Block
        {
                setTile(x,y,z,79);
        }
        if(itemId==280&&blockId==12)//If your item is a Magic Wand, and the block your using it on is sand
        {
                setTile(x,y,z,0);
                addItemInventory(20,1);
        }
        if(itemId==280&&blockId==20)//If your item is a Magic Wand, and the block your using it on is glass
        {
                setTile(x,y,z,0);
                addItemInventory(406,2);
        }
        if(itemId==280&&blockId==7)//If your item is a Magic Wand, and the block your using it on is bedrock
        {
                addItemInventory(87,1);
        }
        if(itemId==280&&blockId==17)//If your item is a wand
   {
      setTile(x,y,z,0);
      addItemInventory(17,1);
      for(var a = 1; a < 10; a++)
      {
        if(getTile(x,y+a,z) == 17)
        {
          setTile(x,y+a,z,0);
          addItemInventory(17,1);
        }
        else {break;}
      }
      preventDefault();
    }
}

//Kioni's Mixture Craft®

if(itemId == 359 && blockId == 173 && getTile(x,y+1,z) == 51)
{
setTile(x, y, z, 0);
setTile(x, y+1, z, 0);
addItemInventory(385,1);
}
if(itemId==289&&blockId==12&&getTile(x,y+1,z)==9)//If your item is gunpowder, and the block your using it on is sand in water
        {
                preventDefault();
                setTile(x,y,z,82);
                addItemInventory(289,-1);
        }
if(itemId==318&&blockId==13)//If your item is a flint, and the block your using it on is gravel
        {
                setTile(x,y,z,0);
                addItemInventory(318,-1);
                addItemInventory(289,1);
                clientMessage("GP+");
        }
        if(itemId==289&&blockId==245)//If your item is a pile of gunpowder, and the block your using it on is a StoneCutter
        {
                preventDefault();
                addItemInventory(348,1);
                addItemInventory(289,-1);
                clientMessage("GS+");
        }
if(itemId==406&&blockId==20&&getTile(x,y-1,z)==51)//If your item is a Nether Quartz, and the block your using it on is glass over a fire
        {
                setTile(x,y,z,0);
                addItemInventory(264,1);
                addItemInventory(406,-1);
                clientMessage("Glass Melt- created Diamond**");
        }
if(itemId==264&&blockId==42&&shelf > 700)//If your item is a Diamond, and the block your using it on is iron block
        {
                setTile(x,y,z,0);
                addItemInventory(264,-1);
                addItemInventory(266,8);
                clientMessage("Transmutation Success!!");
        }
if(itemId==385&&blockId==173)
        {
                 addItemInventory(385,-1);
                 setTile(x, y, z, 10);
        }

//End Mixture Craft.

	if(itemId==280)
 {
		if(blockId==42)
		{
			if(rocket == 0)
			{
				grav = 0;
				tp = 0;
				rocket = 1;
				exp = 0;
              	chopper = 0;
				clientMessage("wand power changed to Leviosa");
			}
			else
			if(rocket == 1)
			{
				rocket = 0;
				clientMessage("Enchantment Leviosa removed from wand");
			}
		}
		else
		if(blockId==41)
		{
			if(tp == 0)
			{
				grav = 0;
				rocket = 0;
				tp = 1;
				exp = 0;
              	chopper = 0;
				clientMessage("wand power changed to Fira");
			}
			else
			if(tp == 1)
			{
				tp = 0;
				clientMessage("Enchantment Fira removed from wand");
			}
		}
   		else
		if(blockId==45)
		{
			if(chopper == 0)
			{
				grav = 0;
				rocket = 0;
				tp = 0;
				exp = 0;
              	chopper = 1;
				clientMessage("wand power changed to Loggsman");
			}
			else
			if(chopper == 1)
			{
				chopper = 0;
				clientMessage("Enchantment Loggsman removed from wand");
			}
		}
		else
		if(blockId==246)
		{
			if(grav == 0)
			{
				rocket = 0;
				tp = 0;
				grav = 1;
				exp = 0;
              	chopper = 0;
				clientMessage("wand power changed to Avada Kadava.");
			}
			else
			if(grav == 1)
			{
				grav = 0;
				clientMessage("Enchantment Avada Kadava removed from wand");
			}
		}
		else
		if(blockId==46)
		{
			if(mine == 0 && exp == 0)
			{
				grav = 0;
				rocket = 0;
				tp = 0;
				exp = 1;
              	chopper = 0;
				clientMessage("wand power changed to Incindio");
			}
			else
			if(mine == 0 && exp == 1)
			{
				exp = 0;
				clientMessage("Enchantment Incindio removed from wand");
			}
		}
		else
		if(blockId==53)
		{
			if(mine == 0 && ride == 0 && exp == 0)
			{
				grav = 0;
				rocket = 0;
				tp = 0;
				exp = 0;
				ride = 1;
              	chopper = 0;
				clientMessage("wand power changed to Raido");
			}
			else
			if(mine == 0 && ride == 1 && exp == 0)
			{
				ride = 0;
				clientMessage("Enchantment Raido removed from wand");
			}
		}
 	else
		if(blockId==49)
		{
			grav = 0;
			tp = 0;
			rocket = 0;
			exp = 0;
          	chopper = 0;
          	ride = 0;
           mine = 0;
			clientMessage("All powers removed from wand"); 
		}
 	else
		if(exp == 1 && ride == 0)
      {
		explode(x,y,z,3.0);
      }
      else
		if(tp== 1)
      {
		setTile(x,y+1,z,51);
      }
  else
    if(chopper ==1 && blockId == 17)
{
setTile(x,y,z,0);
addItemInventory(17,1);
for(var a = 1; a < 10; a++)
{
if(getTile(x,y+a,z) == 17)
{
setTile(x,y+a,z,0);
addItemInventory(17,1);
}
else {break;}
}
preventDefault();
}
}
if (itemId == 260 && blockId == 246) 
{ 
preventDefault();
addItemInventory(260,-1);
var apple = Math.floor((Math.random()*6)+1);
if(apple == 3) {
clientMessage("You Feel Bloody...");
Vampire = 2;
check = 2;
}
}

if (blockId == 246 && getTile(x,y+1,z) == 51 && Vampire == 2) 
{ 
preventDefault();
clientMessage("the blood has been cleansed...");
Vampire = 1;
soul--;
if(pig== true)
          {
          Entity.setRenderType(Player.getEntity(), 3);
          Entity.setMobSkin(Player.getEntity(), "mob/char.png");
          pig = false;
          }
}

if (soul == 9000) 
{
clientMessage("Something feels icky...");
cur9 = 1; 
soul--;
}
if (soul == 8000) 
{
clientMessage("I feel worthy....");
cur9 = 0;
cur8 = 1;
soul--;
}
if (soul == 7000) 
{
clientMessage("...");
cur8 = 0;
cur7 = 1;
soul--;
}
if (soul == 6000) 
{
clientMessage("... . .. ");
cur7 = 0;
cur6 = 1;
soul--;
}
if (soul == 5000) 
{
clientMessage(" you hear a whisper, ....... nichtoe.... . . .");
cur6 = 0;
cur5 = 1;
soul--;
}
if (soul == 4000) 
{
clientMessage("AAÀAAAAAAÀÅAAAAaaaaAaaahhhhhhhhghggjhhghhgggg!!!!!");
cur5 = 0;
cur4 = 1;
soul--;
}
if (soul == 3000) 
{
clientMessage(" you are really starting to feel messed up...");
cur4 = 0;
cur3 = 1;
soul--;
}
if (soul == 2000) 
{
clientMessage(" this is getting aa llot woor sse.... .   . ..");
cur3 = 0;
cur2 = 1;
soul--;
}
if (soul == 1000) 
{
clientMessage(" feEl..l  sOo wRonG...  .. .");
cur2 = 0;
cur1 = 1;
soul--;
}
if (soul == 0) 
{
cur1 = 0;
cur0 = 1;
}
if (cur9 == 1)
{
var random9 = Math.floor((Math.random()*6)+1);
if(random9 == 3) {
Px = getPlayerX(); 
Py = getPlayerY(); 
Pz = getPlayerZ();
Level.dropItem(Px+1, Py, Pz, 1, 341, 1, 0);
Level.dropItem(Px-1, Py, Pz, 1, 341, 1, 0);
Level.dropItem(Px, Py, Pz+1, 1, 341, 1, 0);
Level.dropItem(Px, Py, Pz-1, 1, 341, 1, 0);
}
}
if (cur8 == 1)
{
var random8 = Math.floor((Math.random()*6)+1);
if(random8 == 3) {
setTile(x,y,z,41);
}
}
if (cur7 == 1)
{
var random7 = Math.floor((Math.random()*6)+1);
if(random7 == 3) {
setTile(x,y,z,0);
Level.dropItem(x, y, z, 1, 348, 1, 0);
}
}
if (cur6 == 1)
{
var random6 = Math.floor((Math.random()*6)+1);
if(random6 == 3) {
setTile(x,y,z,0);
Level.dropItem(x, y, z, 1, 331, 1, 0);
}
}
if (cur5 == 1)
{
var random5 = Math.floor((Math.random()*6)+1);
if(random5 == 3) {
setTile(x,y,z,0);
Level.dropItem(x, y, z, 1, 289, 1, 0);
}
}
if (cur4 == 1)
{
var random4 = Math.floor((Math.random()*6)+1);
if(random4 == 3) {
Level.spawnMob(x, y+1, z, 32);
}
}
if (cur3 == 1)
{
var random3 = Math.floor((Math.random()*6)+1);
if(random3 == 3) {
Level.spawnMob(x, y+1, z, 32);
Level.spawnMob(x, y+1, z, 32);
}
}
if (cur2 == 1)
{
var random2 = Math.floor((Math.random()*6)+1);
if(random2 == 3) {
Level.spawnMob(x, y+1, z, 35);
Level.spawnMob(x, y+1, z, 35);
Level.spawnMob(x, y+1, z, 35);
}
}
if (cur1 == 1)
{
var random1 = Math.floor((Math.random()*6)+1);
if(random1 == 3) {
Player.setHealth(4);
}
}
if (cur0 == 1)
{
var random0 = Math.floor((Math.random()*3)+1);
if(random0 == 3) {
setPosition(getPlayerEnt(), 0, 0, 0);
}
}
}

function destroyBlock(x, y, z, blockId) 
{
if(getTile(x, y, z)== 30 && getCarriedItem()==276)
{
Level.dropItem(x, y, z, 1, 30, 1, 0);
Level.dropItem(x, y, z, 1, 30, 1, 0);
Level.spawnMob(x, y, z, 35);
}
if(dream == 1)	
{
dream = 0;
Player.setHealth(20);
setPosition(getPlayerEnt(), Px, Py, Pz);
Level.setTime(0);
}
if(shelf > 50)	
{
var shelfbrk = Math.floor((Math.random()*3)+1);
if(shelfbrk == 3) {
Level.dropItem(x, y, z, 1, 339, 1, 0);
}
}

if(getCarriedItem()==276 && getTile(x, y, z) == 35 && Vampire == 2)
{
preventDefault();
setTile(x, y, z,0);
Level.dropItem(x, y, z, 1, 30, 1, 0);
Level.dropItem(x, y, z, 1, 30, 1, 0);
Level.dropItem(x, y, z, 1, 30, 1, 0);
Level.dropItem(x, y, z, 1, 30, 1, 0);
}
}

function modTick(x,y,z,blockId)
{
var chck = false;

if(Vampire == 2)
{
for(var sy=Math.floor(Player.getY())+1;sy<=
128;sy++) {
chck=false;
if(sy==128) {
chck=true;
}
if(Level.getTile(Math.floor(Player.getX()),sy,Math.floor(Player.getZ()))!=0||Level.getTile(Math.floor(Player.getX()),Math.floor
(Player.getY())-1,Math.floor(Player.getZ()))==8 ||Level.getTile(Math.floor(Player.getX()),Math.floor(Player.getY())-1,Math.floor(Player.getZ() ))==9||Level.getTile(Math.floor(Player.getX()),Math.floor(Player.getY())-2,Math.floor (Player.getZ()))==8||Level.getTile(Math.floor (Player.getX()),Math.floor(Player.getY())-2,Math.floor(Player.getZ()))==9||Level.getTile(Math.floor(Player.getX()),Math.floor(Player.getY())-2 ,Math.floor(Player.getZ()))==79||pig==true||Level.getTime() >= 10412 && Level.getTime() <= 18843
||Level.getTime() >= 29388 && Level.getTime() <= 37615
||Level.getTime() >= 48569 && Level.getTime() <= 56738
||Level.getTime() >= 67832 && Level.getTime() <= 76109
||Level.getTime() >= 86988 && Level.getTime() <= 95490
||Level.getTime() >= 106057 && Level.getTime() <= 114657
||Level.getTime() >= 125414 && Level.getTime() <= 133638
||Level.getTime() >= 144549 && Level.getTime() <= 152629) 
break;
else if(chck==true) {
Entity.setFireTicks(getPlayerEnt(),7);
  }
 }
}

if(Entity.getHealth(getPlayerEnt()) > 40)
{
Player.setHealth(40);
}

if(regen == 1)
{

var health = Entity.getHealth(getPlayerEnt());
	
	if(health == 40) {
		regen = 0;
	}
	if(regen == 1) {
		countdown--;
	} else if(regen == 0) {
		countdown = 30;
	}
	if(countdown == 0) {
		Player.setHealth(health + 1);
		countdown = 30;
	}
}

if(shelf > 500 && getCarriedItem() == 288 && Vampire == 2) {
		if(sprintTick == 1) {
			Xpos = Player.getX();
			Zpos = Player.getZ();
			sprintTick++;
		} if(sprintTick == 3) {
			sprintTick = 1;
			Xdiff = Player.getX() - Xpos;
			Zdiff = Player.getZ() - Zpos;
			Entity.setVelX(Player.getEntity(),Xdiff);
			Entity.setVelZ(Player.getEntity(),Zdiff);
			Xdiff = 0;
			Zdiff = 0;
		} if(sprintTick != 1) {
			sprintTick++;
		}
	}
}

function procCmd(cmd) {
   var command = cmd.split(" ");
  
 	if(command[0] == "home" && dream == 1) {
dream = 0;
Player.setHealth(20);
setPosition(getPlayerEnt(), Px, Py, Pz);
Level.setTime(0);
soul--;
}
   if(command[0] == "nichtoe")
{
          clientMessage(ChatColor.RED + "the blood crys....");
          Vampire = 1;
          check = 1;
          cur9 = 0;
          cur8 = 0;
          cur7 = 0;
          cur6 = 0;
          cur5 = 0;
          cur4 = 0;
          cur3 = 0;
          cur2 = 0;
          cur1 = 0;
          cur0 = 0;
          soul = 9999;
          shelf = 10;
          if(pig== true)
          {
          Entity.setRenderType(Player.getEntity(), 3);
          Entity.setMobSkin(Player.getEntity(), "mob/char.png");
          pig = false;
          }
}
}

function leaveGame()
{
  
if(pig== true)
          {
          pig = false;
          }

  var activity = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
  activity.runOnUiThread(new java.lang.Runnable({ run: function() {
        if(buttonWindow != null) { 
          buttonWindow.dismiss(); 
          buttonwindow = null;
        }
  }}));

ModPE.saveData("rsc", rsc);
ModPE.saveData("shelf", shelf);
ModPE.saveData("gb1", gb1);
ModPE.saveData("gb2", gb2);
ModPE.saveData("gb3", gb3);
ModPE.saveData("gb4", gb4);
ModPE.saveData("gb5", gb5);
ModPE.saveData("trap", trap);
ModPE.saveData("Vampire", Vampire);
ModPE.saveData("soul", soul);
ModPE.saveData("cur9", cur9);
ModPE.saveData("cur8", cur8);
ModPE.saveData("cur7", cur7);
ModPE.saveData("cur6", cur6);
ModPE.saveData("cur5", cur5);
ModPE.saveData("cur4", cur4);
ModPE.saveData("cur3", cur3);
ModPE.saveData("cur2", cur2);
ModPE.saveData("cur1", cur1);
ModPE.saveData("cur0", cur0);
ModPE.saveData("check", check);
}

//Magic Wand Compiled by Kioni from scripts made from Kioni and the original creator of the magic wands scripts mrbliss1, Sprint by WhytoFu, Original Dimension by Hexdro. This is a compilation and i don't take credit for everything involved in this script.

//2014 Kioni ®
